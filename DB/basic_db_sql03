Primary key = not null, unique (index)
unique : 중복되지 않는 값

인덱스
--문법
CREATE INDEX [인덱스명] ON [테이블명](컬럼1, 컬럼2, 컬럼3.......)
--예제
CREATE INDEX EX_INDEX ON CUSTOMERS(NAME,ADDRESS); 
--예제 컬럼 중복 X
CREATE[UNIQUE] INDEX EX_INDEX ON CUSTOMERS(NAME,ADDRESS);

SELECT * FROM USER_INDEXES WHERE TABLE_NAME = 'CUSTOMERS';

인덱스를 생성하는 것이 좋은 컬럼
1. where 절이나 join 조건 안에서 자주 사용되는 컬럼
2. null 값이 많이 포함되어 있는 컬럼
3. where 절이나 join 조건에서 자주 사용되는 두개 이상의 컬럼들

인덱스 불필요한 경우
1. 테이블이 작을때
2. 테이블이 자주 갱신될 때

콜럼1 콜럼2 프라이머리키 는 1,1 1,2 가능
콜럼1 unique not null, 콜럼2 unique not null 은 1,1 1,2 불가능
따로따로 되서

인덱스주고 나중에 select where절에 쓸때 속도가 엄청엄청 빨라짐.


뷰 (가상테이블)


CREATE INDEX idx_student_age
ON t_student(age);

CREATE VIEW VIEW_BOARDLIKE_CNT AS
SELECT I_BOARD, COUNT(I_BOARD) as LIKE_CNT
FROM T_BOARD_LIKE
GROUP BY I_BOARD;
-- 문제나옴
SELECT * FROM VIEW_BOARDLIKE_CNT;
DROP VIEW VIEW_BOARDLIKE_CNT;
DROP INDEX IDX_STUDENT_AGE;

SELECT A.*, B.*, NVL(B.LIKE_CNT, 0) AS LIKE_COUNT, C.STUDENT_NAME
FROM T_BOARD A
LEFT JOIN VIEW_BOARDLIKE_CNT B
ON A.I_BOARD = B.I_BOARD
INNER JOIN T_STUDENT C
ON A.I_STUDENT = C.I_STUDENT
ORDER BY NVL(B.LIKE_CNT, 0) DESC;

SELECT * FROM USER_TABLES;
SELECT * FROM USER_INDEXES;
SELECT * FROM USER_VIEWS;

=====================
이미지 데이터베이스에서 관리
 - 이미지는 0, 1로 이루어짐
이미지 자체를 넣음(데이터 베이스에 부담)
이미지 파일을 서버로 저장하고 그위치가 어디에있는지 주소?를 넣음
(속도가 빠르지만 레코드를 지운다고 이미지가 지워지진않음)
보통 두번째꺼 많이 씀.
